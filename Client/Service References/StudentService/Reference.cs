//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.StudentService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StudentService.IStudentService")]
    public interface IStudentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetCurrentPair", ReplyAction="http://tempuri.org/IStudentService/GetCurrentPairResponse")]
        StudentLogic.StudingTheSubject[] GetCurrentPair(System.DateTime date, StudentLogic.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetCurrentPair", ReplyAction="http://tempuri.org/IStudentService/GetCurrentPairResponse")]
        System.Threading.Tasks.Task<StudentLogic.StudingTheSubject[]> GetCurrentPairAsync(System.DateTime date, StudentLogic.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AttendStudent", ReplyAction="http://tempuri.org/IStudentService/AttendStudentResponse")]
        void AttendStudent(StudentLogic.Student student, bool presence, StudentLogic.StudingTheSubject pair);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AttendStudent", ReplyAction="http://tempuri.org/IStudentService/AttendStudentResponse")]
        System.Threading.Tasks.Task AttendStudentAsync(StudentLogic.Student student, bool presence, StudentLogic.StudingTheSubject pair);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetTeacher", ReplyAction="http://tempuri.org/IStudentService/GetTeacherResponse")]
        StudentLogic.Teacher GetTeacher(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetTeacher", ReplyAction="http://tempuri.org/IStudentService/GetTeacherResponse")]
        System.Threading.Tasks.Task<StudentLogic.Teacher> GetTeacherAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/BeginWork", ReplyAction="http://tempuri.org/IStudentService/BeginWorkResponse")]
        void BeginWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/BeginWork", ReplyAction="http://tempuri.org/IStudentService/BeginWorkResponse")]
        System.Threading.Tasks.Task BeginWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EndWork", ReplyAction="http://tempuri.org/IStudentService/EndWorkResponse")]
        void EndWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EndWork", ReplyAction="http://tempuri.org/IStudentService/EndWorkResponse")]
        System.Threading.Tasks.Task EndWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/RegistrateTeacher", ReplyAction="http://tempuri.org/IStudentService/RegistrateTeacherResponse")]
        int RegistrateTeacher(StudentLogic.Teacher teacher, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/RegistrateTeacher", ReplyAction="http://tempuri.org/IStudentService/RegistrateTeacherResponse")]
        System.Threading.Tasks.Task<int> RegistrateTeacherAsync(StudentLogic.Teacher teacher, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllGroups", ReplyAction="http://tempuri.org/IStudentService/GetAllGroupsResponse")]
        StudentLogic.Group[] GetAllGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllGroups", ReplyAction="http://tempuri.org/IStudentService/GetAllGroupsResponse")]
        System.Threading.Tasks.Task<StudentLogic.Group[]> GetAllGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllSubjects", ReplyAction="http://tempuri.org/IStudentService/GetAllSubjectsResponse")]
        StudentLogic.Subject[] GetAllSubjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllSubjects", ReplyAction="http://tempuri.org/IStudentService/GetAllSubjectsResponse")]
        System.Threading.Tasks.Task<StudentLogic.Subject[]> GetAllSubjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllStudents", ReplyAction="http://tempuri.org/IStudentService/GetAllStudentsResponse")]
        StudentLogic.Student[] GetAllStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllStudents", ReplyAction="http://tempuri.org/IStudentService/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<StudentLogic.Student[]> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddSubject", ReplyAction="http://tempuri.org/IStudentService/AddSubjectResponse")]
        int AddSubject(StudentLogic.Subject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddSubject", ReplyAction="http://tempuri.org/IStudentService/AddSubjectResponse")]
        System.Threading.Tasks.Task<int> AddSubjectAsync(StudentLogic.Subject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditSubject", ReplyAction="http://tempuri.org/IStudentService/EditSubjectResponse")]
        int EditSubject(StudentLogic.Subject subject, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditSubject", ReplyAction="http://tempuri.org/IStudentService/EditSubjectResponse")]
        System.Threading.Tasks.Task<int> EditSubjectAsync(StudentLogic.Subject subject, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteSubject", ReplyAction="http://tempuri.org/IStudentService/DeleteSubjectResponse")]
        int DeleteSubject(StudentLogic.Subject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteSubject", ReplyAction="http://tempuri.org/IStudentService/DeleteSubjectResponse")]
        System.Threading.Tasks.Task<int> DeleteSubjectAsync(StudentLogic.Subject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddGroup", ReplyAction="http://tempuri.org/IStudentService/AddGroupResponse")]
        int AddGroup(StudentLogic.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddGroup", ReplyAction="http://tempuri.org/IStudentService/AddGroupResponse")]
        System.Threading.Tasks.Task<int> AddGroupAsync(StudentLogic.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditGroup", ReplyAction="http://tempuri.org/IStudentService/EditGroupResponse")]
        int EditGroup(StudentLogic.Group group, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditGroup", ReplyAction="http://tempuri.org/IStudentService/EditGroupResponse")]
        System.Threading.Tasks.Task<int> EditGroupAsync(StudentLogic.Group group, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteGroup", ReplyAction="http://tempuri.org/IStudentService/DeleteGroupResponse")]
        int DeleteGroup(StudentLogic.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteGroup", ReplyAction="http://tempuri.org/IStudentService/DeleteGroupResponse")]
        System.Threading.Tasks.Task<int> DeleteGroupAsync(StudentLogic.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddStudent", ReplyAction="http://tempuri.org/IStudentService/AddStudentResponse")]
        int AddStudent(StudentLogic.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddStudent", ReplyAction="http://tempuri.org/IStudentService/AddStudentResponse")]
        System.Threading.Tasks.Task<int> AddStudentAsync(StudentLogic.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditStudent", ReplyAction="http://tempuri.org/IStudentService/EditStudentResponse")]
        int EditStudent(StudentLogic.Student student, string[] newValues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditStudent", ReplyAction="http://tempuri.org/IStudentService/EditStudentResponse")]
        System.Threading.Tasks.Task<int> EditStudentAsync(StudentLogic.Student student, string[] newValues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteStudent", ReplyAction="http://tempuri.org/IStudentService/DeleteStudentResponse")]
        int DeleteStudent(StudentLogic.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteStudent", ReplyAction="http://tempuri.org/IStudentService/DeleteStudentResponse")]
        System.Threading.Tasks.Task<int> DeleteStudentAsync(StudentLogic.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/IsTimeTableForTeacher", ReplyAction="http://tempuri.org/IStudentService/IsTimeTableForTeacherResponse")]
        bool IsTimeTableForTeacher(StudentLogic.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/IsTimeTableForTeacher", ReplyAction="http://tempuri.org/IStudentService/IsTimeTableForTeacherResponse")]
        System.Threading.Tasks.Task<bool> IsTimeTableForTeacherAsync(StudentLogic.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/CreateTimeTable", ReplyAction="http://tempuri.org/IStudentService/CreateTimeTableResponse")]
        int CreateTimeTable(StudentLogic.TimeTable tmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/CreateTimeTable", ReplyAction="http://tempuri.org/IStudentService/CreateTimeTableResponse")]
        System.Threading.Tasks.Task<int> CreateTimeTableAsync(StudentLogic.TimeTable tmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllSdudingSubjects", ReplyAction="http://tempuri.org/IStudentService/GetAllSdudingSubjectsResponse")]
        StudentLogic.StudingTheSubject[] GetAllSdudingSubjects(StudentLogic.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllSdudingSubjects", ReplyAction="http://tempuri.org/IStudentService/GetAllSdudingSubjectsResponse")]
        System.Threading.Tasks.Task<StudentLogic.StudingTheSubject[]> GetAllSdudingSubjectsAsync(StudentLogic.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddPair", ReplyAction="http://tempuri.org/IStudentService/AddPairResponse")]
        int AddPair(StudentLogic.StudingTheSubject pair);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddPair", ReplyAction="http://tempuri.org/IStudentService/AddPairResponse")]
        System.Threading.Tasks.Task<int> AddPairAsync(StudentLogic.StudingTheSubject pair);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetGroupById", ReplyAction="http://tempuri.org/IStudentService/GetGroupByIdResponse")]
        StudentLogic.Group GetGroupById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetGroupById", ReplyAction="http://tempuri.org/IStudentService/GetGroupByIdResponse")]
        System.Threading.Tasks.Task<StudentLogic.Group> GetGroupByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetSubjectById", ReplyAction="http://tempuri.org/IStudentService/GetSubjectByIdResponse")]
        StudentLogic.Subject GetSubjectById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetSubjectById", ReplyAction="http://tempuri.org/IStudentService/GetSubjectByIdResponse")]
        System.Threading.Tasks.Task<StudentLogic.Subject> GetSubjectByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetNextPair", ReplyAction="http://tempuri.org/IStudentService/GetNextPairResponse")]
        Client.StudentService.GetNextPairResponse GetNextPair(Client.StudentService.GetNextPairRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetNextPair", ReplyAction="http://tempuri.org/IStudentService/GetNextPairResponse")]
        System.Threading.Tasks.Task<Client.StudentService.GetNextPairResponse> GetNextPairAsync(Client.StudentService.GetNextPairRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditPair", ReplyAction="http://tempuri.org/IStudentService/EditPairResponse")]
        int EditPair(StudentLogic.StudingTheSubject pair, string[] newvalues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/EditPair", ReplyAction="http://tempuri.org/IStudentService/EditPairResponse")]
        System.Threading.Tasks.Task<int> EditPairAsync(StudentLogic.StudingTheSubject pair, string[] newvalues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeletePair", ReplyAction="http://tempuri.org/IStudentService/DeletePairResponse")]
        int DeletePair(StudentLogic.StudingTheSubject pair);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeletePair", ReplyAction="http://tempuri.org/IStudentService/DeletePairResponse")]
        System.Threading.Tasks.Task<int> DeletePairAsync(StudentLogic.StudingTheSubject pair);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllPresences", ReplyAction="http://tempuri.org/IStudentService/GetAllPresencesResponse")]
        StudentLogic.Presence[] GetAllPresences(StudentLogic.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllPresences", ReplyAction="http://tempuri.org/IStudentService/GetAllPresencesResponse")]
        System.Threading.Tasks.Task<StudentLogic.Presence[]> GetAllPresencesAsync(StudentLogic.Student student);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNextPair", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetNextPairRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public StudentLogic.Teacher teacher;
        
        public GetNextPairRequest() {
        }
        
        public GetNextPairRequest(StudentLogic.Teacher teacher) {
            this.teacher = teacher;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNextPairResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetNextPairResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public StudentLogic.StudingTheSubject[] GetNextPairResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.DateTime date;
        
        public GetNextPairResponse() {
        }
        
        public GetNextPairResponse(StudentLogic.StudingTheSubject[] GetNextPairResult, System.DateTime date) {
            this.GetNextPairResult = GetNextPairResult;
            this.date = date;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStudentServiceChannel : Client.StudentService.IStudentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StudentServiceClient : System.ServiceModel.ClientBase<Client.StudentService.IStudentService>, Client.StudentService.IStudentService {
        
        public StudentServiceClient() {
        }
        
        public StudentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StudentLogic.StudingTheSubject[] GetCurrentPair(System.DateTime date, StudentLogic.Teacher teacher) {
            return base.Channel.GetCurrentPair(date, teacher);
        }
        
        public System.Threading.Tasks.Task<StudentLogic.StudingTheSubject[]> GetCurrentPairAsync(System.DateTime date, StudentLogic.Teacher teacher) {
            return base.Channel.GetCurrentPairAsync(date, teacher);
        }
        
        public void AttendStudent(StudentLogic.Student student, bool presence, StudentLogic.StudingTheSubject pair) {
            base.Channel.AttendStudent(student, presence, pair);
        }
        
        public System.Threading.Tasks.Task AttendStudentAsync(StudentLogic.Student student, bool presence, StudentLogic.StudingTheSubject pair) {
            return base.Channel.AttendStudentAsync(student, presence, pair);
        }
        
        public StudentLogic.Teacher GetTeacher(string login, string password) {
            return base.Channel.GetTeacher(login, password);
        }
        
        public System.Threading.Tasks.Task<StudentLogic.Teacher> GetTeacherAsync(string login, string password) {
            return base.Channel.GetTeacherAsync(login, password);
        }
        
        public void BeginWork() {
            base.Channel.BeginWork();
        }
        
        public System.Threading.Tasks.Task BeginWorkAsync() {
            return base.Channel.BeginWorkAsync();
        }
        
        public void EndWork() {
            base.Channel.EndWork();
        }
        
        public System.Threading.Tasks.Task EndWorkAsync() {
            return base.Channel.EndWorkAsync();
        }
        
        public int RegistrateTeacher(StudentLogic.Teacher teacher, string login, string password) {
            return base.Channel.RegistrateTeacher(teacher, login, password);
        }
        
        public System.Threading.Tasks.Task<int> RegistrateTeacherAsync(StudentLogic.Teacher teacher, string login, string password) {
            return base.Channel.RegistrateTeacherAsync(teacher, login, password);
        }
        
        public StudentLogic.Group[] GetAllGroups() {
            return base.Channel.GetAllGroups();
        }
        
        public System.Threading.Tasks.Task<StudentLogic.Group[]> GetAllGroupsAsync() {
            return base.Channel.GetAllGroupsAsync();
        }
        
        public StudentLogic.Subject[] GetAllSubjects() {
            return base.Channel.GetAllSubjects();
        }
        
        public System.Threading.Tasks.Task<StudentLogic.Subject[]> GetAllSubjectsAsync() {
            return base.Channel.GetAllSubjectsAsync();
        }
        
        public StudentLogic.Student[] GetAllStudents() {
            return base.Channel.GetAllStudents();
        }
        
        public System.Threading.Tasks.Task<StudentLogic.Student[]> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public int AddSubject(StudentLogic.Subject subject) {
            return base.Channel.AddSubject(subject);
        }
        
        public System.Threading.Tasks.Task<int> AddSubjectAsync(StudentLogic.Subject subject) {
            return base.Channel.AddSubjectAsync(subject);
        }
        
        public int EditSubject(StudentLogic.Subject subject, string newName) {
            return base.Channel.EditSubject(subject, newName);
        }
        
        public System.Threading.Tasks.Task<int> EditSubjectAsync(StudentLogic.Subject subject, string newName) {
            return base.Channel.EditSubjectAsync(subject, newName);
        }
        
        public int DeleteSubject(StudentLogic.Subject subject) {
            return base.Channel.DeleteSubject(subject);
        }
        
        public System.Threading.Tasks.Task<int> DeleteSubjectAsync(StudentLogic.Subject subject) {
            return base.Channel.DeleteSubjectAsync(subject);
        }
        
        public int AddGroup(StudentLogic.Group group) {
            return base.Channel.AddGroup(group);
        }
        
        public System.Threading.Tasks.Task<int> AddGroupAsync(StudentLogic.Group group) {
            return base.Channel.AddGroupAsync(group);
        }
        
        public int EditGroup(StudentLogic.Group group, string newName) {
            return base.Channel.EditGroup(group, newName);
        }
        
        public System.Threading.Tasks.Task<int> EditGroupAsync(StudentLogic.Group group, string newName) {
            return base.Channel.EditGroupAsync(group, newName);
        }
        
        public int DeleteGroup(StudentLogic.Group group) {
            return base.Channel.DeleteGroup(group);
        }
        
        public System.Threading.Tasks.Task<int> DeleteGroupAsync(StudentLogic.Group group) {
            return base.Channel.DeleteGroupAsync(group);
        }
        
        public int AddStudent(StudentLogic.Student student) {
            return base.Channel.AddStudent(student);
        }
        
        public System.Threading.Tasks.Task<int> AddStudentAsync(StudentLogic.Student student) {
            return base.Channel.AddStudentAsync(student);
        }
        
        public int EditStudent(StudentLogic.Student student, string[] newValues) {
            return base.Channel.EditStudent(student, newValues);
        }
        
        public System.Threading.Tasks.Task<int> EditStudentAsync(StudentLogic.Student student, string[] newValues) {
            return base.Channel.EditStudentAsync(student, newValues);
        }
        
        public int DeleteStudent(StudentLogic.Student student) {
            return base.Channel.DeleteStudent(student);
        }
        
        public System.Threading.Tasks.Task<int> DeleteStudentAsync(StudentLogic.Student student) {
            return base.Channel.DeleteStudentAsync(student);
        }
        
        public bool IsTimeTableForTeacher(StudentLogic.Teacher teacher) {
            return base.Channel.IsTimeTableForTeacher(teacher);
        }
        
        public System.Threading.Tasks.Task<bool> IsTimeTableForTeacherAsync(StudentLogic.Teacher teacher) {
            return base.Channel.IsTimeTableForTeacherAsync(teacher);
        }
        
        public int CreateTimeTable(StudentLogic.TimeTable tmt) {
            return base.Channel.CreateTimeTable(tmt);
        }
        
        public System.Threading.Tasks.Task<int> CreateTimeTableAsync(StudentLogic.TimeTable tmt) {
            return base.Channel.CreateTimeTableAsync(tmt);
        }
        
        public StudentLogic.StudingTheSubject[] GetAllSdudingSubjects(StudentLogic.Teacher teacher) {
            return base.Channel.GetAllSdudingSubjects(teacher);
        }
        
        public System.Threading.Tasks.Task<StudentLogic.StudingTheSubject[]> GetAllSdudingSubjectsAsync(StudentLogic.Teacher teacher) {
            return base.Channel.GetAllSdudingSubjectsAsync(teacher);
        }
        
        public int AddPair(StudentLogic.StudingTheSubject pair) {
            return base.Channel.AddPair(pair);
        }
        
        public System.Threading.Tasks.Task<int> AddPairAsync(StudentLogic.StudingTheSubject pair) {
            return base.Channel.AddPairAsync(pair);
        }
        
        public StudentLogic.Group GetGroupById(System.Guid id) {
            return base.Channel.GetGroupById(id);
        }
        
        public System.Threading.Tasks.Task<StudentLogic.Group> GetGroupByIdAsync(System.Guid id) {
            return base.Channel.GetGroupByIdAsync(id);
        }
        
        public StudentLogic.Subject GetSubjectById(System.Guid id) {
            return base.Channel.GetSubjectById(id);
        }
        
        public System.Threading.Tasks.Task<StudentLogic.Subject> GetSubjectByIdAsync(System.Guid id) {
            return base.Channel.GetSubjectByIdAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.StudentService.GetNextPairResponse Client.StudentService.IStudentService.GetNextPair(Client.StudentService.GetNextPairRequest request) {
            return base.Channel.GetNextPair(request);
        }
        
        public StudentLogic.StudingTheSubject[] GetNextPair(StudentLogic.Teacher teacher, out System.DateTime date) {
            Client.StudentService.GetNextPairRequest inValue = new Client.StudentService.GetNextPairRequest();
            inValue.teacher = teacher;
            Client.StudentService.GetNextPairResponse retVal = ((Client.StudentService.IStudentService)(this)).GetNextPair(inValue);
            date = retVal.date;
            return retVal.GetNextPairResult;
        }
        
        public System.Threading.Tasks.Task<Client.StudentService.GetNextPairResponse> GetNextPairAsync(Client.StudentService.GetNextPairRequest request) {
            return base.Channel.GetNextPairAsync(request);
        }
        
        public int EditPair(StudentLogic.StudingTheSubject pair, string[] newvalues) {
            return base.Channel.EditPair(pair, newvalues);
        }
        
        public System.Threading.Tasks.Task<int> EditPairAsync(StudentLogic.StudingTheSubject pair, string[] newvalues) {
            return base.Channel.EditPairAsync(pair, newvalues);
        }
        
        public int DeletePair(StudentLogic.StudingTheSubject pair) {
            return base.Channel.DeletePair(pair);
        }
        
        public System.Threading.Tasks.Task<int> DeletePairAsync(StudentLogic.StudingTheSubject pair) {
            return base.Channel.DeletePairAsync(pair);
        }
        
        public StudentLogic.Presence[] GetAllPresences(StudentLogic.Student student) {
            return base.Channel.GetAllPresences(student);
        }
        
        public System.Threading.Tasks.Task<StudentLogic.Presence[]> GetAllPresencesAsync(StudentLogic.Student student) {
            return base.Channel.GetAllPresencesAsync(student);
        }
    }
}
